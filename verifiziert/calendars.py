""" ******************************************************

    Calendar-Klasse.
    
    Beschreibung:   Calendar-Klasse

                                Klasse zur Beschreibung eines
                                Business day Calendars.

    Argumente       Python-Typ  Beschreibung
    -----------------------------------------------------
    datum           dates.date  Zu pruefendes Datum
                    oder string
    off_dates       list[string] Liste der Holiday-Daten
                                in String-Format

    Status
    -----------------------------------------------------
    Syntax          OK
    Numerisch       OK
    Testprogramm    OK          Mit Unittest getestet.
    Literatur-Ref   --
*******************************************************"""
import fin_recipes
import dates

class calendar:
    """ Klasse zur Beschreibung eines Business day Calendars. """
    def __init__(self, off_dates):
        self.off_date_list = []
        if not type(off_dates)==type(self.off_date_list):
            raise TypeError('Wrong argument type used in calendar constructor (list of strings)!')
        for off_date in off_dates:
            # Konversion in dates.date-Typ
            data = dates.date('EU',off_date)
            self.off_date_list.append(data)
        pass

    def is_businessday(self, datum):
        """ gibt True zurueck, falls es sich
            bei der Variable datum um einen
            Business day handelt """
        if type(datum)==type(''):
            try:
                datum=dates.date('autodetect',datum)
            except:
                raise SyntaxError('Wrong argument type used in calendar.is_businessday (string with wrong format)!')
        if datum.is_weekend():
            return False
        elif datum in self.off_date_list:
            return False
        else:
            return True
        
    def holidays(self):
        for holiday in self.off_date_list:
            yield holiday
        

class TARGET(calendar):
    def __init__(self):
        off_dates = [ \
            '01.01.2000', '01.05.2000', '25.12.2000', '26.12.2000',
            '01.01.2001', '01.05.2001', '25.12.2001', '26.12.2001',
            '01.01.2002', '01.05.2002', '25.12.2002', '26.12.2002',
            '01.01.2003', '01.05.2003', '25.12.2003', '26.12.2003',
            '01.01.2004', '01.05.2004', '25.12.2004', '26.12.2004',
            '01.01.2005', '01.05.2005', '25.12.2005', '26.12.2005',
            '01.01.2006', '01.05.2006', '25.12.2006', '26.12.2006',
            '01.01.2007', '01.05.2007', '25.12.2007', '26.12.2007',
            '01.01.2008', '01.05.2008', '25.12.2008', '26.12.2008',
            '01.01.2009', '01.05.2009', '25.12.2009', '26.12.2009',
            '01.01.2010', '01.05.2010', '25.12.2010', '26.12.2010']
        calendar.__init__(self,off_dates)
        pass

class AUD(calendar):
    def __init__(self):
        off_dates = [ \
            '01.01.2002','07.10.2002','25.12.2002','26.12.2002',
            '01.01.2003','27.01.2003','18.04.2003','21.04.2003',
            '25.04.2003','09.06.2003','04.08.2003','06.10.2003',
            '25.12.2003','26.12.2003','01.01.2004','26.01.2004',
            '09.04.2004','12.04.2004','14.06.2004','25.12.2004',
            '27.12.2004','01.01.2005','03.01.2005','26.01.2005',
            '25.03.2005','28.03.2005','25.04.2005','13.06.2005',
            '01.08.2005','03.10.2005','25.12.2005','26.12.2005',
            '27.12.2005','01.01.2006','02.01.2006','26.01.2006',
            '14.04.2006','17.04.2006','25.04.2006','12.06.2006',
            '07.08.2006','02.10.2006','25.12.2006','26.12.2006',
            '01.01.2007','26.01.2007','06.04.2007','09.04.2007',
            '25.04.2007','11.06.2007','06.08.2007','01.10.2007',
            '25.12.2007','26.12.2007','01.01.2008','25.12.2008',
            '01.01.2009','25.12.2009','01.01.2010','25.12.2010']
        calendar.__init__(self,off_dates)
        pass

class CHF(calendar):
    def __init__(self):
        off_dates = [ \
            '01.01.2002','25.12.2002','26.12.2002','01.01.2003',
            '02.01.2003','18.04.2003','21.04.2003','01.05.2003',
            '29.05.2003','09.06.2003','01.08.2003','25.12.2003',
            '26.12.2003','01.01.2004','02.01.2004','09.04.2004',
            '12.04.2004','01.05.2004','20.05.2004','31.05.2004',
            '01.08.2004','25.12.2004','26.12.2004','01.01.2005',
            '25.03.2005','28.03.2005','05.05.2005','16.05.2005',
            '01.08.2005','25.12.2005','26.12.2005','01.01.2006',
            '02.01.2006','14.04.2006','17.04.2006','01.05.2006',
            '25.05.2006','05.06.2006','01.08.2006','25.12.2006',
            '26.12.2006','01.01.2007','02.01.2007','06.04.2007',
            '09.04.2007','01.05.2007','17.05.2007','28.05.2007',
            '01.08.2007','25.12.2007','26.12.2007','01.01.2008',
            '25.12.2008','01.01.2009','25.12.2009','01.01.2010',
            '25.12.2010']
        calendar.__init__(self,off_dates)
        pass

class GBP(calendar):
    def __init__(self):
        off_dates = [ \
            '01.01.2002','25.12.2002','26.12.2002','01.01.2003',
            '18.04.2003','21.04.2003','05.05.2003','26.05.2003',
            '25.08.2003','25.12.2003','26.12.2003','01.01.2004',
            '09.04.2004','12.04.2004','03.05.2004','31.05.2004',
            '30.08.2004','25.12.2004','27.12.2004','28.12.2004',
            '01.01.2005','03.01.2005','25.03.2005','28.03.2005',
            '02.05.2005','30.05.2005','29.08.2005','25.12.2005',
            '26.12.2005','27.12.2005','01.01.2006','02.01.2006',
            '14.04.2006','17.04.2006','01.05.2006','29.05.2006',
            '28.08.2006','25.12.2006','26.12.2006','01.01.2007',
            '06.04.2007','09.04.2007','07.05.2007','28.05.2007',
            '27.08.2007','25.12.2007','26.12.2007','01.01.2008',
            '25.12.2008','01.01.2009','25.12.2009','01.01.2010',
            '25.12.2010']
        calendar.__init__(self,off_dates)
        pass

class HKD(calendar):
    def __init__(self):
        off_dates = [ \
            '01.01.2002','01.10.2002','14.10.2002','25.12.2002',
            '26.12.2002','01.01.2003','31.01.2003','03.02.2003',
            '18.04.2003','21.04.2003','01.05.2003','08.05.2003',
            '04.06.2003','01.07.2003','12.09.2003','01.10.2003',
            '25.12.2003','26.12.2003','01.01.2004','22.01.2004',
            '23.01.2004','05.04.2004','09.04.2004','12.04.2004',
            '26.05.2004','22.06.2004','01.07.2004','29.09.2004',
            '01.10.2004','22.10.2004','25.12.2004','27.12.2004',
            '01.01.2005','09.02.2005','10.02.2005','11.02.2005',
            '25.03.2005','28.03.2005','05.04.2005','02.05.2005',
            '16.05.2005','01.07.2005','19.09.2005','11.10.2005',
            '25.12.2005','26.12.2005','27.12.2005','01.01.2006',
            '02.01.2006','30.01.2006','31.01.2006','05.04.2006',
            '14.04.2006','17.04.2006','01.05.2006','05.05.2006',
            '31.05.2006','02.10.2006','30.10.2006','25.12.2006',
            '26.12.2006','01.01.2007','19.02.2007','20.02.2007',
            '05.04.2007','06.04.2007','09.04.2007','01.05.2007',
            '24.05.2007','19.06.2007','02.07.2007','26.09.2007',
            '01.10.2007','19.10.2007','25.12.2007','26.12.2007',
            '01.01.2008','25.12.2008','01.01.2009','25.12.2009',
            '01.01.2010','25.12.2010']
        calendar.__init__(self,off_dates)
        pass

class JPY(calendar):
    def __init__(self):
        off_dates = [ \
            '01.01.2002','16.09.2002','23.09.2002','14.10.2002',
            '04.11.2002','23.12.2002','25.12.2002','31.12.2002',
            '01.01.2003','02.01.2003','03.01.2003','13.01.2003',
            '11.02.2003','21.03.2003','29.04.2003','05.05.2003',
            '21.07.2003','15.09.2003','23.09.2003','13.10.2003',
            '03.11.2003','24.11.2003','23.12.2003','25.12.2003',
            '31.12.2003','01.01.2004','02.01.2004','12.01.2004',
            '11.02.2004','29.04.2004','03.05.2004','04.05.2004',
            '05.05.2004','19.07.2004','20.09.2004','23.09.2004',
            '11.10.2004','03.11.2004','23.11.2004','23.12.2004',
            '25.12.2004','31.12.2004','01.01.2005','03.01.2005',
            '10.01.2005','11.02.2005','21.03.2005','29.04.2005',
            '03.05.2005','04.05.2005','05.05.2005','18.07.2005',
            '19.09.2005','23.09.2005','10.10.2005','03.11.2005',
            '23.11.2005','23.12.2005','25.12.2005','01.01.2006',
            '02.01.2006','03.01.2006','09.01.2006','21.03.2006',
            '03.05.2006','04.05.2006','05.05.2006','17.07.2006',
            '18.09.2006','09.10.2006','03.11.2006','23.11.2006',
            '25.12.2006','01.01.2007','02.01.2007','03.01.2007',
            '08.01.2007','12.02.2007','21.03.2007','30.04.2007',
            '03.05.2007','04.05.2007','16.07.2007','17.09.2007',
            '24.09.2007','08.10.2007','23.11.2007','24.12.2007',
            '25.12.2007','31.12.2007','01.01.2008','25.12.2008',
            '01.01.2009','25.12.2009','01.01.2010','25.12.2010']
        calendar.__init__(self,off_dates)
        pass
    
class NOK(calendar):
    def __init__(self):
        off_dates = [ \
            '01.01.2002','25.12.2002','26.12.2002','01.01.2003',
            '17.04.2003','18.04.2003','21.04.2003','01.05.2003',
            '17.05.2003','29.05.2003','09.06.2003','24.12.2003',
            '25.12.2003','26.12.2003','01.01.2004','08.04.2004',
            '09.04.2004','12.04.2004','01.05.2004','17.05.2004',
            '20.05.2004','31.05.2004','24.12.2004','25.12.2004',
            '26.12.2004','01.01.2005','24.03.2005','25.03.2005',
            '28.03.2005','05.05.2005','16.05.2005','17.05.2005',
            '25.12.2005','26.12.2005','01.01.2006','13.04.2006',
            '14.04.2006','17.04.2006','01.05.2006','17.05.2006',
            '25.05.2006','05.06.2006','25.12.2006','26.12.2006',
            '01.01.2007','05.04.2007','06.04.2007','09.04.2007',
            '01.05.2007','17.05.2007','28.05.2007','24.12.2007',
            '25.12.2007','26.12.2007','01.01.2008','25.12.2008',
            '01.01.2009','25.12.2009','01.01.2010','25.12.2010']
        calendar.__init__(self,off_dates)
        pass
    
class NZD(calendar):
    def __init__(self):
        off_dates = [ \
            '01.01.2002','28.10.2002','25.12.2002','26.12.2002',
            '01.01.2003','02.01.2003','20.01.2003','06.02.2003',
            '18.04.2003','21.04.2003','25.04.2003','02.06.2003',
            '27.10.2003','25.12.2003','26.12.2003','01.01.2004',
            '02.01.2004','06.02.2004','09.04.2004','12.04.2004',
            '07.06.2004','25.10.2004','25.12.2004','27.12.2004',
            '28.12.2004','01.01.2005','03.01.2005','04.01.2005',
            '24.01.2005','25.03.2005','28.03.2005','25.04.2005',
            '06.06.2005','24.10.2005','25.12.2005','26.12.2005',
            '27.12.2005','01.01.2006','02.01.2006','03.01.2006',
            '23.01.2006','06.02.2006','14.04.2006','17.04.2006',
            '25.04.2006','05.06.2006','23.10.2006','25.12.2006',
            '26.12.2006','01.01.2007','02.01.2007','06.02.2007',
            '06.04.2007','09.04.2007','25.04.2007','04.06.2007',
            '22.10.2007','25.12.2007','26.12.2007','01.01.2008',
            '25.12.2008','01.01.2009','25.12.2009','01.01.2010',
            '25.12.2010']
        calendar.__init__(self,off_dates)
        pass

class SAR(calendar):
    def __init__(self):
        off_dates = [ \
            '01.01.2002','14.10.2002','11.11.2002','28.11.2002',
            '25.12.2002','01.01.2003','20.01.2003','17.02.2003',
            '26.05.2003','04.07.2003','01.09.2003','13.10.2003',
            '11.11.2003','27.11.2003','25.12.2003','01.01.2004',
            '19.01.2004','16.02.2004','31.05.2004','05.07.2004',
            '06.09.2004','11.10.2004','11.11.2004','25.11.2004',
            '25.12.2004','01.01.2005','17.01.2005','21.02.2005',
            '30.05.2005','04.07.2005','05.09.2005','10.10.2005',
            '11.11.2005','24.11.2005','25.12.2005','26.12.2005',
            '01.01.2006','02.01.2006','16.01.2006','20.02.2006',
            '29.05.2006','04.07.2006','04.09.2006','09.10.2006',
            '23.11.2006','25.12.2006','01.01.2007','15.01.2007',
            '19.01.2007','28.05.2007','04.07.2007','03.09.2007',
            '08.10.2007','12.11.2007','22.11.2007','25.12.2007',
            '01.01.2008','25.12.2008','01.01.2009','25.12.2009',
            '01.01.2010','25.12.2010','16.01.2012']
        calendar.__init__(self,off_dates)
        pass

class SEK(calendar):
    def __init__(self):
        off_dates = [ \
            '01.01.2002','24.12.2002','25.12.2002','26.12.2002',
            '31.12.2002','01.01.2003','06.01.2003','18.04.2003',
            '21.04.2003','01.05.2003','29.05.2003','09.06.2003',
            '20.06.2003','24.12.2003','25.12.2003','26.12.2003',
            '31.12.2003','01.01.2004','06.01.2004','09.04.2004',
            '12.04.2004','01.05.2004','20.05.2004','31.05.2004',
            '25.06.2004','24.12.2004','25.12.2004','26.12.2004',
            '31.12.2004','01.01.2005','06.01.2005','25.03.2005',
            '28.03.2005','05.05.2005','16.05.2005','24.06.2005',
            '25.12.2005','26.12.2005','01.01.2006','06.01.2006',
            '14.04.2006','17.04.2006','01.05.2006','25.05.2006',
            '06.06.2006','23.06.2006','25.12.2006','26.12.2006',
            '01.01.2007','06.04.2007','09.04.2007','01.05.2007',
            '17.05.2007','06.06.2007','22.06.2007','24.12.2007',
            '25.12.2007','26.12.2007','31.12.2007','01.01.2008',
            '25.12.2008','01.01.2009','25.12.2009','01.01.2010',
            '25.12.2010']
        calendar.__init__(self,off_dates)
        pass

class SGD(calendar):
    def __init__(self):
        off_dates = [ \
            '01.01.2002','04.11.2002','06.12.2002','25.12.2002',
            '01.01.2003','03.02.2003','12.02.2003','18.04.2003',
            '01.05.2003','15.05.2003','23.10.2003','25.11.2003',
            '25.12.2003','01.01.2004','22.01.2004','23.01.2004',
            '02.02.2004','09.04.2004','02.06.2004','09.08.2004',
            '12.11.2004','15.11.2004','25.12.2004','01.01.2005',
            '21.01.2005','09.02.2005','10.02.2005','25.03.2005',
            '02.05.2005','23.05.2005','09.08.2005','02.11.2005',
            '03.11.2005','25.12.2005','26.12.2005','01.01.2006',
            '02.01.2006','10.01.2006','30.01.2006','31.01.2006',
            '14.04.2006','01.05.2006','12.05.2006','09.08.2006',
            '21.10.2006','24.10.2006','25.12.2006','01.01.2007',
            '02.01.2007','19.02.2007','20.02.2007','06.04.2007',
            '01.05.2007','31.05.2007','09.08.2007','13.10.2007',
            '09.11.2007','20.12.2007','25.12.2007','01.01.2008',
            '25.12.2008','01.01.2009','25.12.2009','01.01.2010',
            '25.12.2010']
        calendar.__init__(self,off_dates)
        pass


class USD(calendar):
    def __init__(self):
        off_dates = [ \
            '01.01.2002','14.10.2002','11.11.2002','28.11.2002',
            '25.12.2002','01.01.2003','20.01.2003','17.02.2003',
            '26.05.2003','04.07.2003','01.09.2003','13.10.2003',
            '11.11.2003','27.11.2003','25.12.2003','01.01.2004',
            '19.01.2004','16.02.2004','31.05.2004','05.07.2004',
            '06.09.2004','11.10.2004','11.11.2004','25.11.2004',
            '25.12.2004','01.01.2005','17.01.2005','21.02.2005',
            '30.05.2005','04.07.2005','05.09.2005','10.10.2005',
            '11.11.2005','24.11.2005','25.12.2005','26.12.2005',
            '01.01.2006','02.01.2006','16.01.2006','20.02.2006',
            '29.05.2006','04.07.2006','04.09.2006','09.10.2006',
            '23.11.2006','25.12.2006','01.01.2007','15.01.2007',
            '19.01.2007','28.05.2007','04.07.2007','03.09.2007',
            '08.10.2007','12.11.2007','22.11.2007','25.12.2007',
            '01.01.2008','25.12.2008','01.01.2009','25.12.2009',
            '01.01.2010','25.12.2010','16.01.2012']
        calendar.__init__(self,off_dates)
        pass

        
if __name__ == "__main__":
    import unittest
    import sys

    print('Unittesting')
    USD_off_dates = [ \
            '01.01.2002','25.12.2002','26.12.2002','01.01.2003',
            '02.01.2003','18.04.2003','21.04.2003','01.05.2003',
            '29.05.2003','09.06.2003','01.08.2003','25.12.2003',
            '26.12.2003','01.01.2004','02.01.2004','09.04.2004',
            '12.04.2004','01.05.2004','20.05.2004','31.05.2004',
            '01.08.2004','25.12.2004','26.12.2004','01.01.2005',
            '25.03.2005','28.03.2005','05.05.2005','16.05.2005',
            '01.08.2005','25.12.2005','26.12.2005','01.01.2006',
            '02.01.2006','14.04.2006','17.04.2006','01.05.2006',
            '25.05.2006','05.06.2006','01.08.2006','25.12.2006',
            '26.12.2006','01.01.2007','02.01.2007','06.04.2007',
            '09.04.2007','01.05.2007','17.05.2007','28.05.2007',
            '01.08.2007','25.12.2007','26.12.2007','01.01.2008',
            '25.12.2008','01.01.2009','25.12.2009','01.01.2010',
            '25.12.2010']
    usd = calendar(USD_off_dates)
    TARGET_off_dates = [ \
            '01.01.2000', '01.05.2000', '25.12.2000', '26.12.2000',
            '01.01.2001', '01.05.2001', '25.12.2001', '26.12.2001',
            '01.01.2002', '01.05.2002', '25.12.2002', '26.12.2002',
            '01.01.2003', '01.05.2003', '25.12.2003', '26.12.2003',
            '01.01.2004', '01.05.2004', '25.12.2004', '26.12.2004',
            '01.01.2005', '01.05.2005', '25.12.2005', '26.12.2005',
            '01.01.2006', '01.05.2006', '25.12.2006', '26.12.2006',
            '01.01.2007', '01.05.2007', '25.12.2007', '26.12.2007',
            '01.01.2008', '01.05.2008', '25.12.2008', '26.12.2008',
            '01.01.2009', '01.05.2009', '25.12.2009', '26.12.2009',
            '01.01.2010', '01.05.2010', '25.12.2010', '26.12.2010']
    target = calendar(TARGET_off_dates)

    class CalendarTestTARGET(unittest.TestCase):
        def setUp(self):
            self.knownValues = [ \
                '01.01.2000', '01.05.2000', '25.12.2000', '26.12.2000',
                '01.01.2001', '01.05.2001', '25.12.2001', '26.12.2001',
                '01.01.2002', '01.05.2002', '25.12.2002', '26.12.2002',
                '01.01.2003', '01.05.2003', '25.12.2003', '26.12.2003',
                '01.01.2004', '01.05.2004', '25.12.2004', '26.12.2004',
                '01.01.2005', '01.05.2005', '25.12.2005', '26.12.2005',
                '01.01.2006', '01.05.2006', '25.12.2006', '26.12.2006',
                '01.01.2007', '01.05.2007', '25.12.2007', '26.12.2007',
                '01.01.2008', '01.05.2008', '25.12.2008', '26.12.2008',
                '01.01.2009', '01.05.2009', '25.12.2009', '26.12.2009',
                '01.01.2010', '01.05.2010', '25.12.2010', '26.12.2010']
            pass

    class CalendarTestUSD(unittest.TestCase):
        def setUp(self):
            self.knownValues = [ \
                '01.01.2000', '01.05.2000', '25.12.2000', '26.12.2000',
                '01.01.2001', '01.05.2001', '25.12.2001', '26.12.2001',
                '01.01.2002', '01.05.2002', '25.12.2002', '26.12.2002',
                '01.01.2003', '01.05.2003', '25.12.2003', '26.12.2003',
                '01.01.2004', '01.05.2004', '25.12.2004', '26.12.2004',
                '01.01.2005', '01.05.2005', '25.12.2005', '26.12.2005',
                '01.01.2006', '01.05.2006', '25.12.2006', '26.12.2006',
                '01.01.2007', '01.05.2007', '25.12.2007', '26.12.2007',
                '01.01.2008', '01.05.2008', '25.12.2008', '26.12.2008',
                '01.01.2009', '01.05.2009', '25.12.2009', '26.12.2009',
                '01.01.2010', '01.05.2010', '25.12.2010', '26.12.2010']
            pass

    class CalendarTestAllValuesTARGET(CalendarTestTARGET):
        def testAllValues(self):
            """testAllValues tests values for 10 years against known TARGET holidays and weekends."""
            testCal = calendar(self.knownValues)
            start = dates.date('EU','31.12.1999')
            end = dates.date('EU','31.12.2010')
            run = start
            testHolidays = [holi for holi in testCal.holidays()]
            while run < end:
                isHoliday = False
                if run in testHolidays: isHoliday = True
                if run.is_weekend(): isHoliday = True
                self.assertEqual(not isHoliday, testCal.is_businessday(run),'failed comparison of all values of day %s' % str(run))
                run += 1
            pass
        def id(self): return "testAllValues"
        def shortDescription(self): return "Test against 10 years of known TARGET holidays and weekends."

    class CalendarTestKnownValuesTARGET(CalendarTestTARGET):
        def testKnownValues(self):
            """testKnownValues tests against all known TARGET holidays."""
            testCal = calendar(self.knownValues)
            for holiday in testCal.holidays():
                self.assertEqual(False, testCal.is_businessday(holiday), 'failed comparison of known values of day %s' % str(holiday))
            pass
        def id(self): return "testKnownValues"
        def shortDescription(self): return "Test against all known TARGET holidays."

    class CalendarTestAllValuesUSD(CalendarTestUSD):
        def testAllValues(self):
            """testAllValues tests values for 10 years against known USD holidays and weekends."""
            testCal = calendar(self.knownValues)
            start = dates.date('EU','31.12.1999')
            end = dates.date('EU','31.12.2010')
            run = start
            testHolidays = [holi for holi in testCal.holidays()]
            while run < end:
                isHoliday = False
                if run in testHolidays: isHoliday = True
                if run.is_weekend(): isHoliday = True
                self.assertEqual(not isHoliday, testCal.is_businessday(run),'failed comparison of all values of day %s' % str(run))
                run += 1
            pass
        def id(self): return "testAllValues"
        def shortDescription(self): return "Test against 10 years of known USD holidays and weekends."

    class CalendarTestKnownValuesUSD(CalendarTestUSD):
        def testKnownValues(self):
            """testKnownValues tests against all known USD holidays."""
            testCal = calendar(self.knownValues)
            for holiday in testCal.holidays():
                self.assertEqual(False, testCal.is_businessday(holiday), 'failed comparison of known values of day %s' % str(holiday))
            pass
        def id(self): return "testKnownValues"
        def shortDescription(self): return "Test against all known USD holidays."

    class CalendarTestBadFormattedValues(CalendarTestTARGET):
        def testBadFormattedValues(self):
            """testBadFormattedValues tests is_businessday() against malformed arguments."""
            testCal = calendar(self.knownValues)
            testlist = ['31.13.2006','aa.bb.dddd','02/30/2005']
            for wrongdate in testlist:
                self.assertRaises(Exception, testCal.is_businessday,wrongdate)
            pass
        def id(self): return "testBadFormattedValues"
        def shortDescription(self): return "Test against malformed arguments in calendar.is_businessday(datum)."

    class CalendarTestBadFormattedConstructorValues(CalendarTestTARGET):
        def testBadFormattedConstructorValues(self):
            """testBadFormattedConstructorValues tests Constructor against malformed arguments."""
            testCal = calendar(self.knownValues)
            # zuerst normale Liste
            testlist = ['31.12.2006','aa.bb.dddd','02/30/2005']
            self.assertRaises(Exception, testCal, testlist)
            # dann einzelne Argumente ohne Liste (Liste unbedingt verlangt!)
            self.assertRaises(Exception, testCal,'31.12.2006')
            self.assertRaises(Exception, testCal,'aa.bb.cccc')
            pass
        def id(self): return "testBadFormattedConstructorValues"
        def shortDescription(self): return "Test against malformed arguments in calendar constructor."


    result = unittest.TestResult()
    suite = unittest.TestSuite()
    suite.addTest(CalendarTestKnownValuesTARGET("testKnownValues"))
    suite.addTest(CalendarTestAllValuesTARGET("testAllValues"))
    suite.addTest(CalendarTestKnownValuesUSD("testKnownValues"))
    suite.addTest(CalendarTestAllValuesUSD("testAllValues"))
    suite.addTest(CalendarTestBadFormattedValues("testBadFormattedValues"))
    suite.addTest(CalendarTestBadFormattedConstructorValues("testBadFormattedConstructorValues"))
    result = unittest.TextTestRunner(stream=sys.stdout, verbosity=2).run(suite)
    if result.wasSuccessful():
        print('Unittest properly executed with %d tests, %d failed.' % (result.testsRun, len(result.failures)))
    else:
        print('Unittest failed: %d failures, %d errors!' % (len(result.failures),len(result.errors)))
